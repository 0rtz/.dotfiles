########################################################################
# general  #############################################################
# prefix key
unbind C-b
set -g prefix C-a
# send c-a to shell on double c-a press
bind C-a send-prefix
set -g mouse on
set -g wrap-search off
set -g focus-events on
set -s escape-time 0
set -g history-limit 20000
set -g default-terminal alacritty
# 24bit colors
set -sa terminal-overrides ",alacritty*:Tc"
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0
########################################################################


########################################################################
# copy-mode ############################################################
set -g mode-keys vi
bind d copy-mode
bind C-d copy-mode
bind -T copy-mode-vi L send -X end-of-line
bind -T copy-mode-vi H send -X start-of-line
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi / command-prompt -p "(search up)" "send -X search-backward \"%%%\""
bind -T copy-mode-vi ? command-prompt -p "(search down)" "send -X search-forward \"%%%\""
bind / copy-mode \; send /
bind ? copy-mode \; send ?
set -s set-clipboard on
bind -T copy-mode-vi y send -X copy-pipe
########################################################################


########################################################################
# Windows, panes, sessions #############################################
setw -g aggressive-resize on
unbind '"'
unbind %
bind v split-window -v -c "#{pane_current_path}" "zsh -i -c 'n && zsh -i'"
bind b split-window -h -c "#{pane_current_path}" "zsh -i -c 'n && zsh -i'"
bind W list-sessions
bind h select-pane -L
bind k select-pane -U
bind j select-pane -D
bind l select-pane -R
bind t new-window -c '$HOME' "zsh -i -c 'n && zsh -i'"
bind T command-prompt -p "new session name:"  "new-session -A -s '%%'"
bind R command-prompt -p "current session name:"  "rename-session '%%'"
bind r command-prompt -p "current window name:"  "rename-window '%%'"
bind X confirm-before -p "kill-window #I? (y/n)" kill-window
bind x confirm-before -p "kill-pane #I? (y/n)" kill-pane
bind T break-pane
bind J join-pane
bind a last-window
bind 'L' swap-pane -D
bind 'H' swap-pane -U
bind -n S-left prev
bind -n S-right next
bind -n C-S-Left swap-window -t -1\; select-window -t -1
bind -n C-S-Right swap-window -t +1\; select-window -t +1
bind Down resize-pane -D 5
bind Up resize-pane -U 5
bind Left resize-pane -L 10
bind Right resize-pane -R 10
# remap window selection starting with 10th window in <c-a>w mode
bind -T root a if -F "#{==:#{pane_mode},tree-mode}" "send M-a" "send a"
bind -T root b if -F "#{==:#{pane_mode},tree-mode}" "send M-b" "send b"
bind -T root C-c if -F "#{==:#{pane_mode},tree-mode}" "send q" "send C-c"
bind -T root c if -F "#{==:#{pane_mode},tree-mode}" "send M-c" "send c"
bind -T root d if -F "#{==:#{pane_mode},tree-mode}" "send M-d" "send d"
bind -T root e if -F "#{==:#{pane_mode},tree-mode}" "send M-e" "send e"
bind -T root f if -F "#{==:#{pane_mode},tree-mode}" "send M-f" "send f"
bind -T root g if -F "#{==:#{pane_mode},tree-mode}" "send M-g" "send g"
bind -T root h if -F "#{==:#{pane_mode},tree-mode}" "send M-h" "send h"
bind -T root i if -F "#{==:#{pane_mode},tree-mode}" "send M-i" "send i"
bind -T root C-j if -F "#{==:#{pane_mode},tree-mode}" "send j" "send C-j"
bind -T root j if -F "#{==:#{pane_mode},tree-mode}" "send M-j" "send j"
bind -T root C-k if -F "#{==:#{pane_mode},tree-mode}" "send k" "send C-k"
bind -T root k if -F "#{==:#{pane_mode},tree-mode}" "send M-k" "send k"
bind -T root l if -F "#{==:#{pane_mode},tree-mode}" "send M-l" "send l"
bind -T root m if -F "#{==:#{pane_mode},tree-mode}" "send M-m" "send m"
bind -T root n if -F "#{==:#{pane_mode},tree-mode}" "send M-n" "send n"
bind -T root o if -F "#{==:#{pane_mode},tree-mode}" "send M-o" "send o"
bind -T root p if -F "#{==:#{pane_mode},tree-mode}" "send M-p" "send p"
bind -T root C-q if -F "#{==:#{pane_mode},tree-mode}" "send q" "send C-q"
bind -T root q if -F "#{==:#{pane_mode},tree-mode}" "send M-q" "send q"
bind -T root r if -F "#{==:#{pane_mode},tree-mode}" "send M-r" "send r"
bind -T root s if -F "#{==:#{pane_mode},tree-mode}" "send M-s" "send s"
bind -T root t if -F "#{==:#{pane_mode},tree-mode}" "send M-t" "send t"
bind -T root u if -F "#{==:#{pane_mode},tree-mode}" "send M-u" "send u"
bind -T root v if -F "#{==:#{pane_mode},tree-mode}" "send M-v" "send v"
bind -T root w if -F "#{==:#{pane_mode},tree-mode}" "send M-w" "send w"
bind -T root x if -F "#{==:#{pane_mode},tree-mode}" "send M-x" "send x"
bind -T root y if -F "#{==:#{pane_mode},tree-mode}" "send M-y" "send y"
bind -T root z if -F "#{==:#{pane_mode},tree-mode}" "send M-z" "send z"
########################################################################


########################################################################
# keybindings ##########################################################
# reload tmux configuration
bind S source-file ~/.config/tmux/tmux.conf
# clear scrollback buffer
bind C-l clear-history
# easily toggle synchronization (sends input to all panes in a given window) (mnemonic: e is echo)
bind e set-window-option synchronize-panes\; display-message "synchronize-panes is now #{?pane_synchronized,on,off}"
# monitor for output in specific window
bind n set-window-option monitor-activity\; display-message "monitoring activity for #W window: #{?monitor-activity,on,off}"
# minimize/hide status bar
bind , if-shell '[ -n $(tmux show status-left) ]' 'set-option status-left "" ; set-option status-right ""' 'set-option -u status-left ; set-option -u status-right'
bind . set -g status
########################################################################


########################################################################
# TPM plugins ##########################################################
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'nhdaly/tmux-better-mouse-mode'
set -g @plugin 'tmux-plugins/tmux-logging'
set -g @plugin 'roosta/tmux-fuzzback'
set -g @plugin 'sainnhe/tmux-fzf'
set -g @plugin 'schasse/tmux-jump'
set -g @plugin 'laktak/extrakto'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-cpu'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

# nhdaly/tmux-better-mouse-mode
set -g @emulate-scroll-for-no-mouse-alternate-buffer "on"
set -g @scroll-speed-num-lines-per-scroll 5

# tmux-plugins/tmux-logging
set -g @screen-capture-key 'y'
set -g @save-complete-history-key 'Y'

# roosta/tmux-fuzzback
set -g @fuzzback-bind f
set -g @fuzzback-popup 1
set -g @fuzzback-popup-size '99%'
set -g @fuzzback-finder-bind 'ctrl-s:jump'

# sainnhe/tmux-fzf
TMUX_FZF_ORDER="pane|window|session|keybinding"
TMUX_FZF_LAUNCH_KEY="F"
TMUX_FZF_OPTIONS="-p -w 90% -h 90% -m --bind ctrl-s:jump"
bind-key "p" run-shell -b "~/.config/tmux/plugins/tmux-fzf/scripts/pane.sh switch"
TMUX_FZF_MENU=\
"switch to pane\n~/.config/tmux/plugins/tmux-fzf/scripts/pane.sh switch\n"

# schasse/tmux-jump
set -g @jump-key 's'

# laktak/extrakto
# history content tab completion
set -g @extrakto_copy_key "ctrl-y"
set -g @extrakto_insert_key "enter"

# tmux-plugins/tmux-prefix-highlight
set -g @prefix_highlight_fg "#000000"
set -g @prefix_highlight_bg '#ff0000'
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr 'fg=black,bg=yellow,bold'
set -g @prefix_highlight_show_sync_mode 'on'
set -g @prefix_highlight_sync_mode_attr 'fg=white,bg=blue'

# tmux-plugins/tmux-cpu
set -g @cpu_low_fg_color "#[fg=#ffffff]"
set -g @cpu_medium_fg_color "#[fg=#ffef00]"
set -g @cpu_high_fg_color "#[fg=#ff0000]"
set -g @ram_low_fg_color "#[fg=#ffffff]"
set -g @ram_medium_fg_color "#[fg=#ffef00]"
set -g @ram_high_fg_color "#[fg=#ff0000]"
set -g @ram_medium_thresh "70" # medium percentage threshold
set -g @ram_high_thresh "90" # high percentage threshold
set -g @cpu_temp_low_fg_color "#[fg=#ffffff]"
set -g @cpu_temp_medium_fg_color "#[fg=#ffef00]"
set -g @cpu_temp_high_fg_color "#[fg=#ff0000]"

# tmux-plugins/tmux-resurrect
# sessions saved inside ~/.tmux/resurrect/
set -g @resurrect-processes 'zsh nnn'
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-save '\'

# tmux-plugins/tmux-continuum
set -g @continuum-restore 'on'
set -g @continuum-save-interval '30'
continuum_auto_save='#(~/.config/tmux/plugins/tmux-continuum/scripts/continuum_save.sh)'
########################################################################


########################################################################
# colorscheme & bottom bar format ######################################

# colorschemes
# source-file $HOME/.config/tmux/themes/nightfox_blue.conf
source-file $HOME/.config/tmux/themes/github_dark_high_contrast.conf

# construct bottom bar
set -g status "on"
set -g status-justify "left"
set -g status-keys vi
set -g base-index 1
set -g status-left-length "100"
set -g status-right-length "100"
set -g status-left-style NONE
set -g status-right-style NONE
# separator between windows names in bottom bar
setw -g window-status-separator ""

# colors from sourced theme file
# ctrl-w window
set -g mode-style "fg=#{@MY_FG_COLOR},bg=#{@MY_BG_COLOR_LIGHT}"
# tmux messages area
set -g message-style "fg=#{@MY_FG_COLOR},bg=#{@MY_BG_COLOR_LIGHT}"
# tmux command line
set -g message-command-style "fg=#{@MY_FG_COLOR},bg=#{@MY_BG_COLOR_LIGHT}"
# border between inactive windows
set -g pane-border-style "fg=#{@MY_BG_COLOR_LIGHT}"
# border of active windows
set -g pane-active-border-style "fg=#{@MY_ACTIVE_BORDER}"
# bottom bar color
set -g status-style "bg=#{@MY_BG_COLOR}"
# style of activity monitored window
set -g window-status-activity-style "underscore,fg=#{@MY_RED_COLOR},bg=#{@MY_BG_COLOR}"
# set window-status-style as an option and refer to it in window-status-format as [default], in order for window-status-activity-style to work
set -g window-status-style "NONE,fg=#{@MY_FG_COLOR_1},bg=#{@MY_BG_COLOR}"

set -g status-left '\
#{prefix_highlight}\
#[fg=#{@MY_BG_COLOR},bg=#{@MY_FG_COLOR},bold] #S \
#[fg=#{@MY_FG_COLOR},bg=#{@MY_FG_COLOR_1}]#[fg=#{@MY_FG_COLOR_1},bg=#{@MY_FG_COLOR_2}]#[fg=#{@MY_FG_COLOR_2},bg=#{@MY_FG_COLOR_3}]#[fg=#{@MY_FG_COLOR_3},bg=#{@MY_FG_COLOR_4}]#[fg=#{@MY_FG_COLOR_4},bg=#{@MY_BG_COLOR}] '

set -g window-status-format "#[fg=#{@MY_BG_COLOR},bg=#{@MY_BG_COLOR},nobold,nounderscore,noitalics]\
#[default] #I:#W#(printf '%%s\n' '#F' | sed 's/-/󰜱/' | sed 's/Z/󰊓/')\
#[fg=#{@MY_BG_COLOR},bg=#{@MY_BG_COLOR},nobold,nounderscore,noitalics]"
set -g window-status-current-format "#[fg=#{@MY_BG_COLOR},bg=#{@MY_BG_COLOR_LIGHT},nobold,nounderscore,noitalics]\
#[fg=#{@MY_FG_COLOR},bg=#{@MY_BG_COLOR_LIGHT},bold] #I:#W#(printf '%%s\n' '#F' | sed 's/*//' | sed 's/Z/󰊓/') \
#[fg=#{@MY_BG_COLOR_LIGHT},bg=#{@MY_BG_COLOR},nobold,nounderscore,noitalics]"

set -g status-right '\
#{$continuum_auto_save}\
#(if [ -n "${SSH_TTY}" ]; then echo "#[fg=#{@MY_RED_COLOR},bg=#{@MY_BG_COLOR}] 󰣀 "; fi) \
#[fg=#{@MY_FG_COLOR_3},bg=#{@MY_BG_COLOR}]#[fg=#{@MY_FG_COLOR_2_INVERSE},bg=#{@MY_FG_COLOR_3}] #{cpu_percentage}   \
#[fg=#{@MY_FG_COLOR_2},bg=#{@MY_FG_COLOR_3}]#[fg=#{@MY_FG_COLOR_2_INVERSE},bg=#{@MY_FG_COLOR_2}] #{cpu_temp}#(if sensors; then echo " "; fi) \
#[fg=#{@MY_FG_COLOR_1},bg=#{@MY_FG_COLOR_2}]#[fg=#{@MY_BG_COLOR},bg=#{@MY_FG_COLOR_1}] #(~/.config/tmux/ram_status.sh) 󰍛 \
#[fg=#{@MY_FG_COLOR},bg=#{@MY_FG_COLOR_1}]#[fg=#{@MY_BG_COLOR},bg=#{@MY_FG_COLOR}] #(~/.config/tmux/disk_status.sh) 󰋊 \
#{prefix_highlight}'
########################################################################


########################################################################
# run plugin manager ###################################################
run '~/.config/tmux/plugins/tpm/tpm'
########################################################################
